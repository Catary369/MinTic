# -*- coding: utf-8 -*-
"""MINTIC sem 1 a 4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fXeaarE47r9mdsQ278Aqm6AvEIYXHI9o
"""

import random #se importa la librería de python random

lambetazo = ["Queridos", "Apreciados", "Distinguidos", "Honorables", "Estimados", "Respetados"]  #se define una lista
potenciales_marranos = ["compatriotas", "conciudadanos", "amigos", "coterraneos", "compartidarios", "electores"]
condicion = ["voy a derrotar", "vencere", "eliminare", "acabare", "luchare contra", "combatire"]

lambetazo_seleccionado = random.choice(lambetazo) #se utiliza la librería para seleccionar un elemento al azar de la lista sujetos
potenciales_marranos_seleccionado = random.choice(potenciales_marranos)
condicion_seleccionado = random.choice(condicion)

print("Discurso politico: " + lambetazo_seleccionado + " " + potenciales_marranos_seleccionado + " " + condicion_seleccionado) #se imprime el discurso

a = 0.5

pert = ((a > 0) and (a <= 1)) or ((a > 2) and (a <= 3))
print(pert)


a = 4
b = 2

c = not (a >= -2 and a < 3.5 and b > -1.25 and b <= 1.5) or (a**2 + b**2 <= 1)
print(c)

cadena1 = "Hello"
cadena2 = "World"

print(cadena1 + " " + cadena2)

op = 4 + -3 * 6 + 4 / 2
print(op)

op = 8 + 4 * 2 // 1 * 2
print(op)

a = 3
b = 8

comp = a != b and b >= 5
print(comp)

a = -42 // 6 + 7 * 3 -39
print(a)

b = 12 * 3 - -4 + 8 // 2 % 3
print(b)

x = 5
y = 6
z = 3

x = x + 8
print(x,  y, z)

x = x + y + z
print(x,  y, z)

x = y + z
print(x,  y, z)

print("k", "i", "j")
k = 1
print(k)

i = k + 1
print(k, i)

j = 2 * k
print(k, i, j)

i = i * k * j
print(k, i, j)

j = j * k - i
print(k, i, j)

def cuadrado(x):
  potencia = x * x
  suma = x + x
  return potencia

print(cuadrado(5))

import math

def area_circulo(r):
  return math.pi * r**2

print(area_circulo(5))

entero = 4
flotante = 2.99
booleano = True
cadena = "9"

print("entero " + str(booleano)) # pasa a texto

print(int(flotante)) #pasa a entero sin redondear

print(round(flotante)) #redondea

print(float(entero)) # pasa a decimal

def area_circulo(r):
  return math.pi * r**2

def are_rectangulo(a, l):
  return a * l

def area_forma(area_circulo, are_rectangulo):
  return area_circulo + are_rectangulo

areac = area_circulo(5)
arear = are_rectangulo(5.3, 2)

print(area_forma(areac, arear))

import math

def coulomb(q1, q2, r):
  Kappa = 9e9
  f = Kappa * (q1 *q2) / r**2

  return f

carga1 = 3
carga2 = 2
distancia = 10

print(coulomb(carga1, carga2, distancia))

import math

def coulomb(q1, q2, r):
  Kappa = 9e9
  f = Kappa * (q1 *q2) / r**2

  return f

carga1 = float(input("Ingresa la carga 1: "))
carga2 = float(input("Ingresa la carga 2: "))
distancia = float(input("Ingresa la distancia: "))

print("El modulo de fierza es: ", coulomb(carga1, carga2, distancia))

# Voluemn de una esfera Ve = (4 * pi * r**3) / 3
# volumen de un cono Vc = (pi * r**2 * h) / 3

import math

def vol_esf(r1):
  ve = (4 * math.pi * r1**3) / 3
  return ve

def vol_cono(r2, h):
  vc = (math.pi * r2**2 * h) / 3
  return vc

def vol_fig(vol_esf, vol_cono):
  vf = (vol_esf + vol_cono)
  return vf

radio1 = 3
radio2 = 4
altura1 = 9/2
altura2 = 9//2
vole = vol_esf(radio1)
volc = vol_cono(radio2, altura1)
volc2 = vol_cono(radio2, altura2)

print("Volumen de esfera calculado con float:", vol_esf(float(radio1)))
print("Volumen de esfera calculado con int:", int(vol_esf(int(radio1))))

print("Volumen de cono calculado con float:", vol_cono(float(radio2), float(altura1)))
print("Volumen de cono calculado con int:", int(vol_cono(int(radio2), int(altura2))))

print("Volumen de la figura calculado con float:", vol_fig(float(vole), float(volc)))
print("Volumen de la figura calculado con int:", int(vol_fig(int(vole), int(volc2))))

def valor_absoluto(x):
  if x >= 0:
    valor = x
  else:
    valor = -x
  return valor

num = float(input("Ingres el numero: "))
print("El valor absoluto de", num, "es", valor_absoluto(num))

def max_numero(n1, n2):
  if n1 > n2:
    max = n1
  else:
    max = n2
  return max

num1 = int(input("Ingrese el primer número:"))
num2 = int(input("Ingrese el segundo número:"))

print("El número mayor entre:", num1, "y", num2, "es:", max_numero(num1, num2))

# operador ternario

def valor_absoluto(x):
  return x if x >= 0 else -x

num = float(input("Ingres el numero: "))
print("El valor absoluto de", num, "es", valor_absoluto(num))

def numero_signo(x):
  if x >=0:
    print("+", end="")
  print(x)

num = float(input("Ingres el numero: "))
numero_signo(num)

# Descuento de día 1

def pago_final(n, precio):
  if n <= 5:
    valor = n * precio
  elif n > 5 and n <= 10:
    valor = n * precio * 0.95
  elif n > 10 and n <= 20:
    valor = n * precio * 0.90
  else:
    valor = n * precio * 0.80
  return valor

print(pago_final(15, 100))

#Problemas varios 1

def podando_arboles(p, k, t):
  arboles = t / (p * k)
  return arboles

ramas = float(input("¿Cuantas ramas tiene el árbol?: "))
p_hojas = float(input("¿Cuantas hojas tiene una rama?: ")) 
t_hojas = float(input("Ingrese cuantas hojas desea obtener: "))

print("la cantidad de árboles necesarios son:", podando_arboles(p_hojas, ramas, t_hojas))

#Problemas varios 1

def interes_simple(k, i):
  pagar_s = k + (k * (i / 100) * 7)
  return pagar_s

def interes_compuesto(k, i):
  pagar_c = k * ((1 + (i / 100))**7)
  return pagar_c


capital = float(input("Valor a prestar: "))
intereses_d = float(input("Tasa de interés diaria (%): "))

print("Pagaré en una semana al interés simple:", int(interes_simple(capital, intereses_d)))
print("Pagaré un una semana al interés compuesto:", int(interes_compuesto(capital, intereses_d)))

import math

def area_carrito(b, a, r):
  valor = (b * a) + ((math.pi * r**2) * 2)
  return valor

base = float(input("Base: "))
altura = float(input("Altura: "))
radio = float(input("Radio: "))

print("El area del carrrito es:", area_carrito(base, altura, radio))

#Estruturas Ciclicas
# While

i = 0
while(i <= 3):
  print(i)
  i = i +1
print("end")

i = 2 # inicializa a i en 2
j = 25 # inicializa a j en 25
while i < j: # mientras i sea menor a j
  print(i, j, sep = ", ") # imprime los valores de i y j
  i *= 2 # i = i * 2; i se mult ́ıplica por 2 en cada paso
  j += 10 # j = j + 10; se incrementa de 10 en 10
print("the end.") # se ejecuta al terminar el ciclo
print(i, j, sep = ", ") # valores finales de i y j

def min_maquina():
  Xo = 1.0
  Xi = Xo / 2.0
  while Xi > 0.0:
    Xo = Xi
    Xi = Xo / 2.0
  return Xo
print("El mınimo numero positivo", end = " ")
print("en esta maquina es:", min_maquina())

# do - while

def min_maquina():
  Xi = 1.0
  while Xi > 0.0:
    Xo = Xi
    Xi = Xo / 2.0
  return Xo
print("El mınimo numero positivo", end = " ")
print("en esta maquina es:", min_maquina())

numero = 0
while(numero <= 5):
  print(numero, numero ** 2)
  numero = numero + 1
print("Hecho")

# for

frutas = ["Tomate", "Guayaba", "Pera"] #llaces para crear una coleccion

for x in frutas:
  print(x)
  if x == "Guayaba":
    break

print(list(range(9))) #Inicia en cero

print(list(range(1, 9))) # Inicia en 1

print(list(range(2, 10, 2))) # tercer argumento para definir modo de incremento

print(list(range(10, 1, -2)))

for i in range (2, 11, 2):
  print(i, i*i)

def suma(n):
  s = 0
  i = 1
  while i <= n:
    s += i
    i += 1
  
  return s

n = int(input("Ingrese n: "))
print(suma(n))

def suma(n):
  s = 0
  for i in range(1, n+1):
    s += i
  
  return s

n = int(input("Ingrese n: "))
print(suma(n))

# Factorial

def factorial(n):
  f = 1
  for i in range(1, n+1):
    f *= i
    print(i, f)

  return f

n = int(input("Ingrese n: "))
print(factorial(n))

x = int(input("Ingrese x: "))
for i in range(1, x+1, 2):
  print(i, i+1)

# for en for

for i in range(0, 3):
  for j in range(3, 6):
    print(i, j)

# Tuplas

a = 1, 2, 3
print(a)

b = (1, 4, 5)
print(b)

c = (a, b, (4, 2, 1), 2, "cadena")
print(c)

print(c[1][2])

print( a + b)

print(a * 3)

print( a > b)

# Subindice []

avengers = ("Ironman", "Thor", "Ant-man", "Hulk")
print(avengers[0])
print(avengers[3])
print(avengers[-1])
print(avengers[-3])

#consultando en tuplas

text = ("cien", "años", "de", "soledad")
if "compañia" not in text:
  print("No esta en la tupla")
else:
  print("Si esta en la tupla")

# iterando en tuplas

s = ("hola", "amigos", "mios")
for palabra in s: # para cada palabra de la tupla
  print(palabra, end = ", ")

# Asignando multiples variables a tuplas

tupla = (1, -2, 3)
a, b, c = tupla
print("a =", a)
print("b =", b)
print("c =", c)

#Intercambio de variables

a = 1
b = 3
a, b = b, a
print("a =", a)
print("b =", b)

tupla = (11, 9, -2, 3, 8, 5)
var1, var2, var3 = (tupla[i] for i in (1, 3, 5))
print("var1 =", var1, ", var2 =", var2, ", var3 =", var3)

var1, var2, var3 = (tupla[i] for i in range(0,6,2))
print("var1 =", var1, ", var2 =", var2, ", var3 =", var3)

def minmax(a, b):
  if a < b:
    return a, b
  else:
    return b, a
x, y = minmax(5, 13)
print("min =", x, ",", "max =", y)
x, y = minmax(12, -4)
print("min =", x, ",", "max =", y)

tup = (1, 2, 3, 4)
nombre = ("Minch", "Yoda")
trabajo = ("Stars", "War", "Movie")
empty = ()
print(len(tup))
print(len(nombre))
print(len(trabajo))
print(len(empty))

# Subindice (Slices) 

avengers = ("Ironman", "Thor", "Ant-man", "Hulk")
print(avengers[:2])
print(avengers[1:3])
print(avengers[3:3])
print(avengers[::-1])
print(avengers[:2:-1])

# contando

tupla = (4, 3, 8, 8, 2, 5, 4, 6, 8, 9)
print(tupla.count(2))
print(tupla.count(8))
print(tupla.count(5))
print(tupla.count(7))

# Index

tupla = (4, 3, 8, 8, 2, 5, 4, 6, 8, 9)
print(tupla.index(2))
print(tupla.index(8))
print(tupla.index(5))

# Max Min

t = (4, 5, -1, 6, 7)
print(max(t))
print(min(t))

# de cadena a tupla

magician = "Dumbledore"
tm = tuple(magician)
print(tm)

# map

k = tuple(map(int, input().split(" "))) # digite 1 2 3
print(k)
print(k[0] + k[1])

# map

def incremento(cad):
  num = int(cad)

  return num + 3

k = tuple(map(incremento, input().split(" "))) # digite 1 2 3
print(k)

t = (1, 2, 3, 4, 5)

t = t [::-1]
t2 = t [3:5]
print(t)
print(t2)

# listas

lista1 = [0, 1, 2, 3]
lista2 = ["A", "B", "C"]
lista3 = [lista1, lista2]
print(lista3)
print(lista3[0])
print(lista3[1])
print(lista3[1][0])

# listas extend

nombres = ["Antonio", "Mar ́ıa", "Mabel"]
otros_nombres = ["Barry", "John", "Guttag"]
nombres.extend(otros_nombres)
print(nombres)
print(otros_nombres)

# creando una lista con el ciclo for

d = 10
desplaza = [d + x for x in range(5)]
print(desplaza)
potencias = [3 ** x for x in range(2, 6)]
print(potencias)

# cambiando elementos en listas

lista = ["E", "l", "m", "e", "j", "o", "r"]
lista[0] = "e"
print(lista)
lista[4] = "l"
print(lista)
lista[-1] = "s"
print(lista)

# append

nombres = ["Antonio", "Johan"]
nombres.append("Monica")
print(nombres)
nombres.append("Maria")
print(nombres)
nombres.append("Mabel")
print(nombres)

# insert

nombres = ["Antonio", "Johan", "Maria"]
nombres.insert(0, "Guttag")
print(nombres)
nombres.insert(2, "Peter")
print(nombres)
nombres.insert(len(nombres)//2, 10)
print(nombres)

# remove

lista = ["a", "e", "i", "o", "u", "i", "x"]
lista.remove("x")
print(lista)
lista.remove("i")
print(lista)
lista.remove("i")
print(lista)

# sort ordenando una lista

lista = [4, 5, -1, 6, 7]
lista.sort() # De menor a mayor
print(lista)
lista.sort(reverse = True) # De mayor a menor
print(lista)

# convertir a lista

magician = "Dumbledore"
lm = list(magician)
print(lm)
t = (1, 2, 3, 4)
lt = list(t)
print(lt)

# pop remueve de una posicion especifica

nombres = ["Antonio","Johan","Monica","Mar ́ıa","Mabel"]
nombres.pop(1) #remueve a Johan
print(nombres)
nombre_borrado = nombres.pop() # remueve a Mabel
print(nombre_borrado + " ha sido eliminada de la lista.")
print(nombres)

# Arreglos

def lee_arreglo_enteros():
  return [int(x) for x in input("Arreglo:").split()]
print(lee_arreglo_enteros())

def suma_arreglo(A):
  s = 0
  for x in A:
    s += x
  return s
print(suma_arreglo([1,-3,4,11,6]))

def pos_maximo(A):
  m = 0
  for i in range(1,len(A)):
    if A[i] > A[m]:
      m = i
  return m
print(pos_maximo([1,-3,4,11,6]))

# Matriz
def imprimir(M):
  for i in range(len(M)):
    for j in range(len(M[0])):
      print("{:3d}".format( M[i][j], end = " "))
    print()

matriz = [[1, 3, -1], [4, 5, 2]] #matriz de dos arreglos en fila 0
print(matriz)
print(matriz[1][1])
imprimir(matriz)

def cuadrados_matriz(X):
  Y = []
  for i in range(len(X)):
    fila = []
    for j in range(len(X[i])):
      fila.append(X[i][j]*X[i][j])
    Y.append(fila)
  return Y

matriz = [[1,3,-1],[4,5,2]]
#imprimir(matriz)
#print()
print(cuadrados_matriz(matriz))

def diagonal_matriz(X):
  Y = []
  for i in range(len(X)):
    Y.append(X[i][i])
  return Y
print(diagonal_matriz([[1,-3],[4,11]]))

def diagonal(M):
  v = []
  if len(M) != len (M[0]):
    return []
  for i in range(len(M)):
    v.append(M[i][i])
  return v

matriz = [[1,3,-1],[5,5,2],[7,2,1]]
print(diagonal(matriz))

def essimetrica(M):
  for i in range(len(M)):
    for j in range(len(M[0])):
      if M[i][j] != M[j][i]:
        return False
  return True

matriz = [[1,3,-1],[4,5,2],[7,2,1]]
matriz = [[5,1,3],[1,8,2],[3,2,5]]
print(essimetrica(matriz))